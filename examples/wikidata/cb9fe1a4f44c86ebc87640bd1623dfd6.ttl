@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix schema: <https://schema.org/> .

<https://www.wikidata.org/#query-cb9fe1a4f44c86ebc87640bd1623dfd6> a sh:SPARQLExecutable;
  rdfs:comment """Screenshot of the WDQS query editor, which allows queries to be modified and then executed. A page for interesting or illustrative queries. It also discusses how queries can be shown on wiki pages, including either the full code of the query or a templated link.For absolute beginners we recommend first watching the in-depth video tutorial by WMF, before they continue reading this page, as this will help with avoiding common pitfalls and get started. Contents 1 Understanding SPARQL 1.1 Spouses of Madonna 1.2 A minimalist query 1.3 US presidents and their spouses 1.4 US presidents and their spouses, in date order 1.5 Alternative query, via United States of America (Q30) and head of government (P6) 2 Optionality and alternatives 2.1 Optional requirements 2.2 Combining alternatives 2.3 Filtering a particular variable for desired values 2.4 Excluding subsets 3 Querying a class tree 3.1 Properties registered as properties for this type (P1963) for a class or its super-classes 4 Counting and ranking 4.1 Counting 4.2 Ranking 4.3 More examples 5 Adding labels for properties 5.1 Identifiers found most often on items with Art UK artist ID (P1367) 6 Working with qualifiers 6.1 All properties using the specified qualifier with specified value 6.2 Most used qualifiers for a given property 6.3 Properties a qualifier is most commonly applied to 6.4 Most common property + value combinations a qualifier is applied to 6.5 Most frequent values for a given qualifier 6.6 Most used qualifiers in general 6.7 Statements without a specific qualifier for a given property 6.8 Statements without any qualifier for a given property 6.9 Most used qualifier values for a particular statement and qualifier combination 7 Working with references 7.1 Statements without a reference for a particular property 7.2 Properties most often applied to references 7.3 Cactaceae taxa with names referenced to be stated in (P248) either of two books 7.4 Number of references to Le Figaro 7.5 References to Le Figaro website 8 Working with sitelinks 8.1 Countries that have sitelinks to en-wiki 8.2 Countries that have a Featured Article on Russian Wikipedia 8.3 Numbers of sitelinks for items with Art UK artist ID (P1367) for each language 9 Working with dates 9.1 Count of people with place of burial (P119) = Père Lachaise Cemetery (Q311), broken out by year 9.2 People buried at Père Lachaise, born on this day 9.3 Male Americans born after 1875 and before 1930, that have a day-specific date of death, but only a year-specific date of birth. 9.4 People born on this day, generally 9.5 Individuals with the same value for a given property, who appear to share the same day-specific dates of birth and death. 10 Working with coordinates 10.1 Query to find latitudes and longitudes for places in Paris 10.2 Maximum and minimum latitudes and longitudes for places in Paris 10.3 Places within 1 km of the Arc de Triomphe (Q64436) 10.4 Places within 0.01 degrees latitude and longitude of the Arc de Triomphe (Q64436) 10.5 Places between Arc de Triomphe (Q64436) and Louvre Museum (Q19675) 10.6 Distance between Berlin (Q64) and New York (Q1384) 11 Working with first names 11.1 Queries to find most common variants of a particular first name 11.2 Query to find individuals with similar first names and matching dates of birth and death 12 Federation: working with external data sources 13 Templated SPARQL queries, and links from wikipages 13.1 Showing only query links 13.2 Templated queries 13.3 Code on wikipages 13.4 Templates to help build queries : Partial queries 14 Query by natural language 14.1 Missing labels for a target language 14.2 Missing description for a target language 15 Full-text search 16 Resources Understanding SPARQL [edit] Spouses of Madonna [edit] Below is a SPARQL query to return a list of the spouses of the singer Madonna (Q1744): SELECT ?spouse ?spouseLabel WHERE {
   wd:Q1744 wdt:P26 ?spouse.
   SERVICE wikibase:label {
     bd:serviceParam wikibase:language \"en\" .
   }
}
 Try it! Clicking the link above will load the query into the query editor, where it can be modified and executed (and modified again and executed again, and again and again, etc, the more you want to experiment with it). Try it now.How does this work? What is going on here?The key to understanding the query above is the line wd:Q1744 wdt:P26 ?spouse. SPARQL views the entire database (and any other database that can be queried alongside it) as being completely composed of triples, of the form ?subject  ?predicate  ?object Everything in a SPARQL database is cast into triples of this form.The query above is therefore asking SPARQL to return a ?spouse (and a label for it) for every triple of the form wd:Q1744 wdt:P26 ?spouse, where wd:Q1744 stands for the Wikidata entity Madonna (Q1744), and wdt:P26 is a representation of the Wikidata property spouse (P26). Using the query editor it is now easy to change P26 to other properties, and Q1744 to other items, to try a multitude of other combinations.(All the ever-present ? symbols in SPARQL, eg before ?subject or ?spouse, can be quite off-putting to start with, but are simply SPARQL's way of indicating a variable – similar to the $ before a variable like $count in some other programming languages. In fact $ can also be used for variables in SPARQL instead of ?, but ? is more common.) A minimalist query [edit] So what sort of statements are in the database? Very nearly the next most minimal query it is possible to write in SPARQL has the form SELECT * WHERE {
  ?subject ?pred1 ?obj1 .
  ?subject ?pred2 ?obj2
} This asks the service to return all sets of all the variables * in the query for which there is a triple ?subject ?pred1 ?obj1 in the system, and also a triple ?subject ?pred2 ?obj2 for the same ?subject. The dot . expresses the conjunction between the two.As a concrete example of the form above, suggested by Bob DuCharme on Twitter, we can run the query SELECT * WHERE {
  ?s ?label \"The Rolling Stones\"@en .
  ?s ?p ?o
} View and run this query (Follow the link to view the query in the query editor, then hit the 'Run' button to run it.)This query can be understood as asking for all sets of all the variables * in the query, ie ?s, ?label, ?p and ?o, for any triple in the system ?s ?p ?o that relates to any subject ?s connected by any predicate ?label to any English-language text string \"The Rolling Stones\".Examining the output, it is apparent that it has returned all triples relating to The Rolling Stones (Q11036) (a rock band), The Rolling Stones (Q591855) (an album) and The Rolling Stones (Q1754491) (an EP), which are each connected by a predicate identified as rdfs:label to the string \"The Rolling Stones\" in English. US presidents and their spouses [edit] It is all very well to be able to look up all the statements that can be related to a particular string, but more usually we would like to be able to ask questions relating to specific items and properties.Next, then, here is a query involving some actual Wikidata properties and items. The following is a query to return a list of married U.S. presidents and their spouses: SELECT ?pres ?presLabel ?spouse ?spouseLabel WHERE {
   ?pres wdt:P31 wd:Q5 .
   ?pres wdt:P39 wd:Q11696 .
   ?pres wdt:P26 ?spouse .
   SERVICE wikibase:label {
    bd:serviceParam wikibase:language \"en\" .
   }
 }
 Try it! The most noticeable new feature in the above (further accentuated by the syntax highlighting) is the presence of features like wdt:P39 wd:Q11696.Here wdt:P39 represents a simplified manifestation of the position held (P39) Wikidata property.In line with the SPARQL model of everything as a triple, the wdt: namespace contains manifestations of properties as simple predicates that can directly connect an item to a value. (Other more complicated potential aspects of statements involving properties will be considered in due course). In this case, therefore, the line ?pres wdt:P39 wd:Q11696 expresses a requirement that, for a value of ?pres to be acceptable, there must be a triple in the database that connects it, via this simplified version of the property \"position held\", to the value wd:Q11696, which represents the wikidata item for the office of President of the United States (Q11696).In SPARQL, particular elements may only be specified in a query if they can be formally identified with a unique Internationalized resource identifier (IRI) starting http://.... In practice, it is convenient to separate the full IRI of the element into two parts: a namespace, that groups together similar sorts of elements, together with a short identifier specific to that namespace. We have already encountered such an element previously, rdfs:label, an element with a meaning defined by the World Wide Web Consortium that connects another element to an appropriate label string describing it in a particular language. Here label is the short identifier, while rdfs: is shorthand for the namespace <http://www.w3.org/2000/01/rdf-schema#>, where information about label is defined.For the simplest queries, the RDF representation of Wikidata used for the SPARQL service makes use of two key namespaces: wd:, which is where items live, and wdt: for elements that serve as a simplified representation of properties, directly connecting items and values. The 't' in wdt: stands for \"truthy\". Such triples, using the wdt: representation of the property, are not created for all statements, but for only statements that have the highest rank for the property on that item and are not deprecated. While not being guaranteed to be true, they are intended to summarise Wikidata's best current understanding of the truth.Finally, the wikibase: namespace is used for various connector, definition, and utility elements used to help define the whole structure. In this case wikibase:label, with the syntax shown, is a special macro that looks up a label in a choice of fallback languages for any variable ending in \"Label\" in the SELECT statement that has a corresponding counterpart without the suffix \"Label\" that has a well-defined value.Armed with this information, the rest of the query can now be understood in detail. Similar to the line ?pres wdt:P39 wd:Q11696 already discussed, the line ?pres wdt:P26 ?spouse requires that any acceptable value of ?pres must appear in a truthy triple connecting it, via the representation of spouse (P26), to a value for a spouse.Additionally ?pres wdt:P31 wd:Q5 requires that ?pres must also be an instance of (P31) human (Q5). This final condition might appear tautological or superfluous; but in fact it is an important requirement to specify, because a simple query seeking only position held (P39) President of the United States (Q11696), such as this one (try it!), also returns a number of individuals such as Gonzo the Mechanical Bastard (Q3545001), that are instance of (P31) fictional human (Q15632617) or other types of fictional character (Q95074). Restriction to human (Q5) is therefore not to be overlooked. US presidents and their spouses, in date order [edit] What if we want to put the presidents into date order? The simply \"truthy\" representation of properties like position held (P39) does not give access to qualifiers like start time (P580).Instead, the query can be achieved as follows, by using connectors which live in three further namespaces: p: – which contains representations of properties such as p:P39, that link an item (or, more technically, an entity) to a statement; ps: – which contains representations of properties such as ps:P39, that link a statement to a value; and pq: – which contains representations, such as pq:P580, of properties being used as qualifiers, that connect a statement to a qualifier value. SELECT ?pres ?presLabel ?spouse ?spouseLabel WHERE {
   ?pres wdt:P31 wd:Q5 .

   ?pres p:P39 ?position_held_statement .
   ?position_held_statement ps:P39 wd:Q11696 .
   ?position_held_statement pq:P580 ?start .

   ?pres wdt:P26 ?spouse .

   SERVICE wikibase:label {
    bd:serviceParam wikibase:language \"en\" .
   }

 } ORDER BY ?start
 Try it! Replacing the previous ?pres wdt:P39 wd:Q11696 with the three lines in the middle of the query thus requires that ?pres is connected by the p: version of position held (P39) to a statement that has a value President of the United States (Q11696) and is also connected to a start date value by the pq: qualifier version of start time (P580).The ORDER BY ?start clause directs that the SELECT results are to be ordered in increasing order of this start date. The descending reverse order could instead be specified by changing this to ORDER BY DESC(?start).A guide to the full triples model (RDF model) for Wikibase can be found here, including a full list of all the different namespaces of connections (predicates) available, and the required PREFIXes needed to declare them (here). Both of these are also linked to directly from the query editor page. Alternative query, via United States of America (Q30) and head of government (P6) [edit] An alternative approach to obtaining the U.S. presidents would be to start from the item United States of America (Q30) and the property head of government (P6). In SPARQL terms, this translates into looking for occurrences of the triple wd:Q30 wdt:P6 ?pres rather than ?pres wdt:P39 wd:Q11696This is easy enough to implement. But perhaps surprisingly running the query only returns two results, with the values for Joe and Jill Biden and for Joe and Neilia Hunter Biden, but includes none of the other presidents and their wives.The reason for this is that the \"truthy\" wdt: properties return only triples that correspond to the best ranked statements for the particular property. Examining the item United States of America (Q30), it can be seen that whereas all the other values have normal status, the value Joe Biden (Q6279) is marked as having preferred status for United States of America (Q30) head of government (P6) (being the current holder of the office).A full list of all of the historical holders of the office can instead be gained using the p: namespace version of the property, i.e. p:P6, to connect to the full statements. Adaptation of the query above to implement this is left as an exercise for the reader, which can then be compared to the code in the example of the Wikibase SPARQL examples page. Optionality and alternatives [edit] Optional requirements [edit] The queries above list U.S. Presidents with their spouses (who are required to exist). But what if we would like to include any U.S. Presidents who had no spouse? This can be achieved by placing the keyword OPTIONAL { ... } around the relationships which are to be optional.It is also necessary to provide a different mechanism to explicitly supply a ?spouse_label, as the wikibase:label service fails if the underlying variable has no value. The label can instead be supplied by adding the line?spouse rdfs:label ?spouse_label filter (lang(?spouse_label) = \"en\"). The resulting query-text can be viewed and executed as this query. Combining alternatives [edit] Under construction – UNION biblical character (Q12405827)s including ones with no books under construction at User:Jheald/sparql/Bible_characters – currently times out Filtering a particular variable for desired values [edit] Conditions on a single variable (or a relationship between variables) can be specified using FILTER ( ... ) with a condition resolving to true or false. SPARQL has various functions for operating on and comparing numbers, strings, and general elements. Excluding subsets [edit] SPARQL has three different idioms for excluding subsets: OPTIONAL { ... ?x ... } FILTER(!bound(?x)), FILTER NOT EXISTS { ... } MINUS { ... } Currently, in almost all circumstances, Blazegraph resolves all of these to the same query plan. The following query uses these:Items: scholarly article (Q13442814)   Properties: instance of (P31)   #  Elasticsearch is being used only during the call to the wikibase:mwapi SERVICE.
#  Everything happening outside this call is handled by Blazegraph, such as MINUS.
SELECT ?item ?itemLabel WHERE {
 SERVICE wikibase:mwapi {
   bd:serviceParam wikibase:endpoint \"www.wikidata.org\";
   wikibase:api \"EntitySearch\";
   mwapi:search \"front matter\";  # Search for things named \"front matter\"
   mwapi:language \"en\".
   ?item wikibase:apiOutputItem mwapi:item.
 }
 MINUS {
    ?item wdt:P31 wd:Q13442814 . # but MINUS any of those things that are instances of scholarly article
 }
 SERVICE wikibase:label {bd:serviceParam wikibase:language \"en\".}
} Try it! Querying a class tree [edit]So-called \"path\" queries give a shorthand for specifying a chain of predicates of indefinite length through which a subject can be connected to an object. For example"""@en;
  dcterms:isPartOf <https://www.wikidata.org//wiki/Wikidata:SPARQL_query_service/queries>;
  dcterms:license <https://creativecommons.org/licenses/by-sa/4.0/>;
  sh:prefixes _:wikidata_prefixes, _:genid-9eb55b2583ef4ad09d9d48ff9f18ffec125843-wikidata_prefixes;
  schema:target <https://query.wikidata.org/sparql/> .
